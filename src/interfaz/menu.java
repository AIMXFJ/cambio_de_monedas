/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import devolvercambio.DevolverCambio;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author AIMX
 */
public class menu extends javax.swing.JFrame {

    //Valores por defecto
    double[] tiposMonedas = {0.01, 0.02, 0.05, 0.10, 0.20, 0.50, 1, 2};
    double totalMonedasDisponibles = 54.8;
    int[] monedasDisponibles = {10, 8, 9, 11, 12, 13, 14, 15};

    /**
     * Creates new form menu
     */
    public menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonCalcularVoraz = new javax.swing.JButton();
        jTextCantidad = new javax.swing.JTextField();
        jButtonCalcularBacktracking = new javax.swing.JButton();
        jButtonCalcularDinamica = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextTiempo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextResultado = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemConfiguracion = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenu2.setText("File");
        jMenuBar2.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar2.add(jMenu3);

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Cantidad a cambiar:");

        jLabel2.setText("Resultado:");

        jButtonCalcularVoraz.setText("Calcular Voraz");
        jButtonCalcularVoraz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcularVorazActionPerformed(evt);
            }
        });

        jButtonCalcularBacktracking.setText("Calcular Backtracking");
        jButtonCalcularBacktracking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcularBacktrackingActionPerformed(evt);
            }
        });

        jButtonCalcularDinamica.setText("Calcular Dinamica");
        jButtonCalcularDinamica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcularDinamicaActionPerformed(evt);
            }
        });

        jLabel3.setText("Tiempo que ha tardado:");

        jTextTiempo.setEditable(false);

        jLabel4.setText("(En milisegundos)");

        jTextResultado.setEditable(false);
        jTextResultado.setColumns(20);
        jTextResultado.setRows(5);
        jScrollPane1.setViewportView(jTextResultado);

        jMenu1.setText("Admin");

        jMenuItemConfiguracion.setText("Configuracion");
        jMenuItemConfiguracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConfiguracionActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemConfiguracion);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Archivo");

        jMenuItem2.setText("Cargar configuracion");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)
                        .addComponent(jTextCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jLabel2)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCalcularVoraz)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCalcularBacktracking)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCalcularDinamica)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(28, 28, 28)
                        .addComponent(jTextTiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107))))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCalcularVoraz)
                    .addComponent(jButtonCalcularBacktracking)
                    .addComponent(jButtonCalcularDinamica))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextTiempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCalcularVorazActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcularVorazActionPerformed
        /*
            Calculo del del inpu del usuario con un algoritmo voraz
        */

        DevolverCambio cambiador = new DevolverCambio();
        double cambio = Double.parseDouble(jTextCantidad.getText());

        //Si es un input valido, se calcula, si no se crea un dialogo de error
        if (esViable(cambio)) {
            //Se cogen los tiempos del sistema para calcular cuanto ha tardado en milisegundos
            long tiempoIni = System.currentTimeMillis();
            calcularVoraz(cambiador, cambio);
            long tiempoFin = System.currentTimeMillis();
            this.jTextTiempo.setText(Long.toString(tiempoFin - tiempoIni));
        } else {
            this.jTextResultado.setText("0");
            JOptionPane.showMessageDialog(this,
                    "Es imposible devolver " + cambio + " con las monedas existentes.",
                    "No existe soluci√≥n",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonCalcularVorazActionPerformed

    //Revisa si merece la pena calcularlo, ya que si no va a tener solucion podemos saberlo de antemano
    private boolean esViable(double cambio) {
        double total = 0;
        for (int i = 0; i < tiposMonedas.length; i++) {
            total += tiposMonedas[i] * monedasDisponibles[i];
        }
        System.out.println(total);
        return cambio <= total;
    }

    //Transforma el array devuelto por un algoritmo en un output entendible para el usuario
    private String arrayToString(int[] array) {
        String out = "";
        int total = 0;

        for (int i = 0; i < array.length; i++) {
            out += ">Moneda/s de " + this.tiposMonedas[i] + " ‚Ç¨: " + array[i] + "\n";
            total += array[i];
        }

        //Tratamiento del total de monedas, se revisa si no tiene solucion
        if (total <= 0) {
            out += "NO TIENE SOLUCI√ìN\n";
        } else {
            out += ">Total de monedas = " + total;
        }

        return out;
    }

    //Metodo llamado por el boton correspondiente, muestra el array devuelto por el algoritmo en la interfaz, tras ser transformado
    private void calcularDinamico(DevolverCambio cambiador, double cambio) {
        this.jTextResultado.setText(arrayToString(cambiador.devolverCambioDinamico(tiposMonedas, monedasDisponibles, tiposMonedas.length, cambio)));
    }

    //Metodo llamado por el boton correspondiente, muestra el array devuelto por el algoritmo en la interfaz, tras ser transformado
    private void calcularVoraz(DevolverCambio cambiador, double cambio) {
        this.jTextResultado.setText(arrayToString(cambiador.devolverCambioVoraz(tiposMonedas, monedasDisponibles, cambio)));
    }

    //Metodo llamado por el boton correspondiente, muestra el array devuelto por el algoritmo en la interfaz, tras ser transformado
    private void calcularBacktracking(DevolverCambio cambiador, double cambio) {
        this.jTextResultado.setText(arrayToString(cambiador.devolverCambioBackTracking(tiposMonedas, monedasDisponibles, cambio)));
    }

    //Lee un archivo cuyo nombre es el argumento del metodo y establece la nueva configuracion del programa
    private void leerArchivoConfiguracion(String archivo) {
        try {
            Scanner input = new Scanner(new FileReader(archivo));
            String tipos = "";
            String cantidades = "";

            tipos = input.nextLine();
            cantidades = input.nextLine();

            List<String> tiposDividido = Arrays.asList(tipos.split("\\s*,\\s*"));
            List<String> cantidadesDividido = Arrays.asList(cantidades.split("\\s*,\\s*"));

            //Si ambas listas tienen la misma cantidad de elementos es una configuraci√≥n valida
            if (tiposDividido.size() != cantidadesDividido.size()) {
                JOptionPane.showMessageDialog(this,
                        "El numero de valores en ambas entradas debe ser el mismo",
                        "Input error",
                        JOptionPane.ERROR_MESSAGE);
            } else {

                this.tiposMonedas = new double[tiposDividido.size()];
                this.monedasDisponibles = new int[cantidadesDividido.size()];

                for (int r = 0; r < this.tiposMonedas.length; r++) {
                    this.tiposMonedas[r] = Double.valueOf(tiposDividido.get(r));
                    if (this.tiposMonedas[r] < 0) {             //Si en algun momento algun valor es menor que 0, se cuenta como 0
                        this.tiposMonedas[r] = 0;
                    }
                }

                for (int q = 0; q < this.monedasDisponibles.length; q++) {
                    if (Integer.valueOf(cantidadesDividido.get(q)) >= 0) {
                        this.monedasDisponibles[q] = Integer.valueOf(cantidadesDividido.get(q));
                        this.totalMonedasDisponibles += Integer.valueOf(cantidadesDividido.get(q));
                    } else {                                            //Si en algun momento algun valor es menor que 0, se cuenta como 0
                        this.monedasDisponibles[q] = 0;
                        this.totalMonedasDisponibles += 0;
                    }
                }
            }

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this,
                    "Archivo no encontrado",
                    "File Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    //Realiza lo mismo que leerArchivoConfiguracion pero adaptado a obtener el input de la interfaz
    private void jMenuItemConfiguracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConfiguracionActionPerformed
        JTextField tiposField = new JTextField("", 6);
        JTextField valoresField = new JTextField("", 6);

        JPanel panel = new JPanel();
        panel.add(new JLabel("Introducir los elementos separados mediante comas."));
        panel.add(new JLabel("Tipos de moneda:"));
        panel.add(tiposField);
        panel.add(Box.createHorizontalStrut(15)); // a spacer
        panel.add(new JLabel("N√∫mero de monedas de cada tipo:"));
        panel.add(valoresField);

        int result = JOptionPane.showConfirmDialog(null, panel,
                "Configuraci√≥n", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            if (tiposField.getText().equals("") && valoresField.getText().equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Los valores no pueden estar vac√≠os.",
                        "Input error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                List<String> tipos = Arrays.asList(tiposField.getText().split("\\s*,\\s*"));
                List<String> cantidades = Arrays.asList(valoresField.getText().split("\\s*,\\s*"));

                if (tipos.size() != cantidades.size()) {
                    JOptionPane.showMessageDialog(this,
                            "El numero de valores en ambas entradas debe ser el mismo",
                            "Input error",
                            JOptionPane.ERROR_MESSAGE);
                } else {

                    this.tiposMonedas = new double[tipos.size()];
                    this.monedasDisponibles = new int[cantidades.size()];

                    for (int r = 0; r < this.tiposMonedas.length; r++) {
                        this.tiposMonedas[r] = Double.valueOf(tipos.get(r));
                        if (this.tiposMonedas[r] < 0) {
                            this.tiposMonedas[r] = 0;
                        }
                    }

                    for (int q = 0; q < this.monedasDisponibles.length; q++) {
                        if (Integer.valueOf(cantidades.get(q)) >= 0) {
                            this.monedasDisponibles[q] = Integer.valueOf(cantidades.get(q));
                            this.totalMonedasDisponibles += Integer.valueOf(cantidades.get(q));
                        } else {
                            this.monedasDisponibles[q] = 0;
                            this.totalMonedasDisponibles += 0;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jMenuItemConfiguracionActionPerformed

    //Calcula el resultado empleando backtracking
    private void jButtonCalcularBacktrackingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcularBacktrackingActionPerformed
        DevolverCambio cambiador = new DevolverCambio();
        double cambio = Double.parseDouble(jTextCantidad.getText());
        if (esViable(cambio)) {
            //Se cogen los tiempos del sistema para calcular cuanto ha tardado en milisegundos
            long tiempoIni = System.currentTimeMillis();
            calcularBacktracking(cambiador, cambio);
            long tiempoFin = System.currentTimeMillis();
            this.jTextTiempo.setText(Long.toString(tiempoFin - tiempoIni));
        } else {
            this.jTextResultado.setText("0");
            JOptionPane.showMessageDialog(this,
                    "Es imposible devolver " + cambio + " con las monedas existentes.",
                    "No existe soluci√≥n",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonCalcularBacktrackingActionPerformed

    //Calcula el resultado empleando programacion dinamica
    private void jButtonCalcularDinamicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcularDinamicaActionPerformed
        DevolverCambio cambiador = new DevolverCambio();
        double cambio = Double.parseDouble(jTextCantidad.getText());
        if (esViable(cambio)) {
            //Se cogen los tiempos del sistema para calcular cuanto ha tardado en milisegundos
            long tiempoIni = System.currentTimeMillis();
            calcularDinamico(cambiador, cambio);
            long tiempoFin = System.currentTimeMillis();
            this.jTextTiempo.setText(Long.toString(tiempoFin - tiempoIni));
        } else {
            this.jTextResultado.setText("0");
            JOptionPane.showMessageDialog(this,
                    "Es imposible devolver " + cambio + " con las monedas existentes.",
                    "No existe soluci√≥n",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonCalcularDinamicaActionPerformed

    //Permite cargar un archivo habiendo introducido su nombre con extension incluida
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JTextField archivoField = new JTextField("", 6);

        JPanel panel = new JPanel();
        panel.add(new JLabel("Nombre del archivo a cargar: "));
        panel.add(archivoField);

        int result = JOptionPane.showConfirmDialog(null, panel,
                "Configuraci√≥n", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            //Si no se ha escrito nada, mostrar error
            if (archivoField.getText().equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Campo vacio",
                        "Input error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                leerArchivoConfiguracion(archivoField.getText());
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCalcularBacktracking;
    private javax.swing.JButton jButtonCalcularDinamica;
    private javax.swing.JButton jButtonCalcularVoraz;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemConfiguracion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextCantidad;
    private javax.swing.JTextArea jTextResultado;
    private javax.swing.JTextField jTextTiempo;
    // End of variables declaration//GEN-END:variables
}
